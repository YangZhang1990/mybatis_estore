<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- namespace命名空间，作用就是对SQL进行分类化管理，理解为SQL隔离
注意：使用mapper代理方法开发，namespace有特殊重要的作用,namespace等于mapper接口地址
 -->
 
 <mapper namespace="cn.itcast.mybatis.mapper.UserMapper">
     
     <!-- 用户信息综合查询 
     #{userCustom.sex} : 取出pojo包装对象中性别值
     ${userCustom.username}: 取出pojo包装对象中的用户名称
     -->
     <select id="findUserList" parameterType="userQueryVo" resultType="userCustom">
         select * from user where user.sex=#{userCustom.sex} and user.username like '%${userCustom.username}%'
     </select>
     
     
     
     <!-- 在映射文件中配置很多SQL语句 -->
     <!-- 需求：通过id查询用户表的记录 -->
     <!-- 用select执行数据库查询
     id：标识映射文件中的sql,将sql语句封装到mappedStatement对象中，
     	所以id为mappedStatement的id
     parameterType: 指定输入参数类型，这里指定int型
     #{}： 表示一个占位符
     #{id}： 其中id 表示接收输入的参数，参数名称就是id,
     		如果输入参数是简单类型，#{}中的参数名称可以任意，可以value或者其他名称
     
     resultType： 指定SQL输出结果所映射的java对象，
     select指定resultType表示将单条记录所映射的java对象
     -->
     <select id="findUserById" parameterType="int" resultType="user">
         SELECT * FROM USER WHERE id=#{id}
     </select>
     
     <!-- 根据用户名称模糊查询用户信息, 可能返回多条
     resultType:指定的就是单条记录所映射的java对象
     ${}: 表示拼接SQL串，将接收到的参数的内容不加任何修饰拼接在SQL中
           使用${}拼接SQL，可以引起SQL注入 
     ${value}：接受输入参数的内容，如果传入参数类型为简单类型，只能用value作为名称-->
     <select id="findUserByName" parameterType="java.lang.String" resultType="user">
         SELECT * FROM USER WHERE USERNAME LIKE '%${value}%'
     </select>
     
     <!-- 添加用户
     parameterType:指定输入参数类型是pojo(包括用户信息)，不是简单类型了 
     #{}中指定pojo的属性名，接收到pojo对的属性值，mybatis通过OGNL获取对象的属性值
     -->
     <insert id="insertUser" parameterType="user">
         <!-- 
         	将插入数据的主键返回，返回到user对象中
         	SELECT LAST_INSERT_ID(): 得到刚insert进去记录的主键值，只适用于自增主键
         	keyProperty: 将查询到的主键值设置到parameterType指定的对象的哪个属性
         	order:SELECT LAST_INSERT_ID()的执行顺序，相对于insert语句来说它的执行顺序
         	resultType:指定SELECT LAST_INSERT_ID()的结果类型
          -->
    	<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
    	    SELECT LAST_INSERT_ID()

    	</selectKey>
         INSERT INTO user(username,birthday,sex,address) VALUE (#{username},#{birthday},#{sex},#{address})
	 </insert>
	 
     <!-- 删除用户 
     	根据ID删除用户，需要输入id值-->
     <delete id="deleteUser" parameterType="java.lang.Integer">
         DELETE FROM USER WHERE id=#{id}
     </delete>
	 
     <!-- 更新用户 
     	根据id更新用户，需要输入id值
     	以及用户的更新信息
     	parameterType指定user对象，包括id和更新信息，注意id必须存在
     	#{id}:从输入user对象中获取id属性值
     	
     	-->
     <update id="updateUser" parameterType="cn.itcast.mybatis.po.User">
         UPDATE USER SET username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} WHERE id=#{id}
     </update>
         	    
   	   <!--  使用MYSQLD uuid（）生成主键 :
   	   执行过程：
   	   首先通过uuid()得到主键，将主键设置到user对象的id属性中，其次在insert执行时从user对象中去除ID值
   	  <insert id="insertUser" parameterType="cn.itcast.mybatis.po.User">
   	      <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
   	          SELECT UUID()
   	      </selectKey>
   	      INSERT INTO user(id,username,birthday,sex,address) VALUE (#{id},#{username},#{birthday},#{sex},#{address})
   	  </insert> 
   	   -->

 </mapper>
